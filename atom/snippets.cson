# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# JAVASCRIPT SNIPPETS
# ============================================================
'.source.js':

  # ATOM PLUGIN SNIPPETS
  # ============================================================
  "editor-fold":
    "prefix": "// e"
    "body": "// <editor-fold desc='$1'>\n// </editor-fold>"





  # PROMISE SNIPPETS
  # ============================================================

  '.then':
    'prefix': 'then'
    'body': """
            .then(function(response) {
              $1
            })
            """



  '.catch':
    'prefix': 'catch'
    'body': """
            .catch(function(err) {
              $1
            })
            """





  # EXPRESS SERVER SNIPPET
  # ============================================================

  'Express Server':
    'prefix': 'express'
    'body': """
            /*------------------------------------*\\\\
              #VENDOR DEPENDENCIES
            \\\\*------------------------------------*/

            const express = require('express')
            const cors = require('cors')
            const bodyParser = require('body-parser')





            /*------------------------------------*\\\\
              #VARIABLES
            \\\\*------------------------------------*/

            const port = 8080





            /*------------------------------------*\\\\
              #INITIALIZE APP
            \\\\*------------------------------------*/

            const app = express()





            /*------------------------------------*\\\\
              #INITIALIZE APP
            \\\\*------------------------------------*/

            app.use(cors())
            app.use(bodyParser.json())





            /*------------------------------------*\\\\
              #LISTEN
            \\\\*------------------------------------*/

            app.listen(port, function() {
              console.log('Server listening on port', port)
            })
            """



  'Endpoints':
    'prefix': 'end'
    'body': """
            /*------------------------------------*\\\\
              #${1:MODEL} ENDPOINTS
            \\\\*------------------------------------*/

            app.get('/${2:model}', ${3:model}Ctrl.read)
            app.post('/${2:model}', ${3:model}Ctrl.create)
            app.put('/${2:model}/:id', ${3:model}Ctrl.update)
            app.delete('/${2:model}/:id', ${3:model}Ctrl.delete)
            $4
            """





  # REACT SNIPPETS
  # ============================================================
  'React':
    'prefix': 'react'
    'body': """
            import React from 'react'

            const $1 = React.createClass() {
              render() {
                return(
                  <div>

                  </div>
                )
              },
            }

            export default $1
            """



  'Div':
    'prefix': 'div'
    'body': """
            <div>
              $1
            </div>
            """



  'Input':
    'prefix': 'input'
    'body': """
            <input
              className="$1"
              type="${2:text}"
              placeholder="$3"
              onChange={this.handleInputChange}
            />
            $4
            """



  'Button':
    'prefix': 'button'
    'body': """
            <button
              className="$1"
              type="button"
              onClick={}
            >
              $2
            </button>
            """



  'Header':
    'prefix': 'h1'
    'body': """
            <h${1:1}></h${1:1}>
            """



  'Link':
    'prefix': 'a'
    'body': """
            <a href="$1">$2</a>
            """



  'Image':
    'prefix': 'img'
    'body': """
            <img src="$1" />
            """



  'Paragraph':
    'prefix': 'p'
    'body': """
            <p>$1</p>
            """



  # REACT SNIPPETS
  # ============================================================
  'Webpack':
    'prefix': 'webpack'
    'body': """
            const path = require('path')
            const merge = require('webpack-merge')

            const parts = require('./webpack.parts.js') // Create this file

            const PATHS = {
              app: path.join(__dirname, 'src'),
              build: path.join(__dirname, 'public', 'build'),
            }

            const commonConfig = merge([
              {
                entry: {
                  app: PATHS.app,
                },
                output: {
                  path: PATHS.build,
                  publicPath: '/build/',
                  filename: '[name].js',
                },
              },
            ])

            const productionConfig = merge([
              parts.minifyJavaScript({ useSourceMap: true }),
            ])

            const developmentConfig = merge([

            ])

            module.exports = function(env) {
              return env === 'production'
                ? merge(commonConfig, productionConfig)
                : merge(commonConfig, developmentConfig)
            }
            """




  # HTML SNIPPETS
# ============================================================
'.text.html, .text.html .meta.scope.between-tag-pair, .text.html .punctuation.tag.begin':



  'modal template':
    'prefix': 'modal'
    'body': """
            <div class="overlay">
            </div>
            <div class="fade"></div>
            """



  'HTML Boilerplate':
    'prefix': 'html'
    'body': """
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="utf-8">

                <!-- Uncomment this to reload favicon -->
                <!-- <link rel="shortcut icon" href="./favicon.ico?v=1"> -->

            		<!-- Mobile Specific Metas ------------------------------------------------>
            		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

                <title>$1</title>
              </head>
              <body>
                $2
              </body>
            </html>

            """


# CSS SNIPPETS
# ============================================================
'.source.css':
  'modal classes':
    'prefix': 'modal'
    'body': """
            /*------------------------------------*\\\\
              #MODAL OVERLAY
            \\\\*------------------------------------*/

            .overlay {
              color: black;
              position: fixed
              top: 50%
              left: 50%
              transform: translate(-50%, -50%)
              padding: 25px;
              background-color: #ffffff;
              z-index: 100;
              overflow: auto;
              border-radius: 3px;
              border: 1px solid #C0C3C5;
            }

            /*------------------------------------*\\\\
              #MODAL FADE
            \\\\*------------------------------------*/

            .fade {
              position: fixed;
              left: 0%;
              top: 0%;
              background-color: black;
              -moz-opacity: 0.7;
              opacity: .70;
              filter: alpha(opacity=70);
              width: 100%;
              height: 100%;
              z-index: 99;
            }
            """
